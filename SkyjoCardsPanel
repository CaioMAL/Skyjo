import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.*;
import java.awt.image.*;
import javax.imageio.ImageIO;
import java.io.*;
import java.util.*;


public class SkyjoCardsPanel extends JPanel implements MouseListener{
	
	private ArrayList<Card> deck2 = new ArrayList<Card>();
	private ArrayList<Card> discardPile = new ArrayList<Card>();
	private BufferedImage empty, cb, cm1, cm2, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, table, again, next;
	private boolean[] clickedAreasP1 = new boolean[12];
	private boolean[] clickedAreasP2 = new boolean[12];
	private boolean[] goneP1 = new boolean[12];
	private boolean[] goneP2 = new boolean[12];
	private Card[][] p1 = new Card[3][4];
	private Card[][] p2 = new Card[3][4];
	private Card[][] downCardsP1 = new Card[3][4];
	private Card[][] downCardsP2 = new Card[3][4];
	private Card discard, draw;
	private boolean timeToDraw = false;
	//true = p1 false = p2
	private boolean pTurn = true;
	private String P1turn = "P1 turn";
	private String P2turn = "P2 turn";
	private boolean whoStarts1 = true;
	private boolean whoStarts2 = true;
	private int scoreP1 = 0;
	private int scoreP2 = 0;
	private int totalScoreP1 = 0;
	private int totalScoreP2 = 0;
	private int draw2 = 0;
	private int draw22 = 0;
	private Card temp;
	private boolean selectCard1 = false;
	private boolean selectCard2 = false;
	private boolean intro = true;
	private int cnt = 0;
	private boolean flip = false;
	private int flippedCardsP1 = 0;
	private int flippedCardsP2 = 0;
	private boolean roundEnd = false;
	private int turnsP1 = 1;
	private int turnsP2 = 1;
	private boolean p1FinishFirst;
	private boolean gameEnd = false;
	
	public SkyjoCardsPanel()
	{
		try
		{
			empty = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/empty.png"));
			cb = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjoBack.jpg"));
			cm1 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo-1.jpg"));
			cm2 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo-2.jpg"));
			c0 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo0.jpg"));
			c1 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo1.jpg"));
			c2 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo2.jpg"));
			c3 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo3.jpg"));
			c4 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo4.jpg"));
			c5 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo5.jpg"));
			c6 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo6.jpg"));
			c7 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo7.jpg"));
			c8 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo8.jpg"));
			c9 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo9.jpg"));
			c10 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo10.jpg"));
			c11 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo11.jpg"));
			c12 = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/skyjo12.jpg"));
			table = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/table.jpg"));
			again = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/again.png"));
			next = ImageIO.read(SkyjoCardsPanel.class.getResource("/Image/next.png"));
		}
		catch(Exception E)
		{
			System.out.println("Exception Error");
			return;
		}
		
		addMouseListener(this);
		
		//makes deck
		for(int i = 0; i < 5; i++){deck2.add(new Card(cm2, -2));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(cm1, -1));}
		for(int i = 0; i < 15; i++){deck2.add(new Card(c0, 0));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c1, 1));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c2, 2));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c3, 3));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c4, 4));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c5, 5));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c6, 6));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c7, 7));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c8, 8));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c9, 9));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c10, 10));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c11, 11));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c12, 12));}
		
		//makes grid for each player
		for(int i = 0; i < 3; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				int rand = (int)(Math.random()*deck2.size());
				p1[i][j] = deck2.remove(rand);
			}
		}
		for(int i = 0; i < 3; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				downCardsP1[i][j] = new Card(cb, 0);
			}
		}
		for(int i = 0; i < 3; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				downCardsP2[i][j] = new Card(cb, 0);
			}
		}
		for(int i = 0; i < 3; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				int rand = (int)(Math.random()*deck2.size());
				p2[i][j] = deck2.remove(rand);
			}
		}
		
		//starts discard pile
		int rand = (int)(Math.random()*deck2.size());
		discard = new Card(deck2.remove(rand).getFace(), deck2.remove(rand).getValue());
		discardPile.add(new Card(cb, 0));
		discardPile.add(discard);
		draw = new Card(cb, 0);
	}
	
	public void paint(Graphics g)
	{
		super.paint(g);
		g.drawImage(table, 0, 0, getWidth(), getHeight(), null);
		g.setColor(Color.BLACK);
		g.setFont(new Font("Ariel", Font.PLAIN, 11));
		g.drawString("if deck disappears click below this to draw", getWidth()*158/352, getHeight()*8/50);
		g.setFont(new Font("Ariel", Font.PLAIN, 45));
		g.drawString("P1 Score: " + Integer.toString(totalScoreP1), getWidth()*39/88, getHeight()*45/50);
		g.drawString("P2 Score: " + Integer.toString(totalScoreP2), getWidth()*39/88, getHeight()*48/50);
		if(cnt > 0)
			g.drawString("Held Card: " + temp.getValue(), getWidth()*156/352, getHeight()*6/50);
		if(flip == true && pTurn && turnsP1 >= 0)
			g.drawString("P1 flip a card", getWidth()*147/352, getHeight()*6/50);
		else if(flip == true && !pTurn && turnsP2 >= 0)
			g.drawString("P2 flip a card", getWidth()*147/352, getHeight()*6/50);
		if(intro)
			g.drawString("Flip 2 cards each", getWidth()*144/352, getHeight()*3/50);
		else if(timeToDraw && pTurn && turnsP1 >= 0)
			g.drawString("P1 Draw a Card", getWidth()*145/352, getHeight()*3/50);
		else if(timeToDraw && !pTurn && turnsP2 >= 0)
			g.drawString("P2 Draw a Card", getWidth()*145/352, getHeight()*3/50);
		else if(pTurn && turnsP1 >= 0)
			g.drawString(P1turn, getWidth()*41/88, getHeight()*3/50);
		else if(!pTurn && turnsP1 >= 0)
			g.drawString(P2turn, getWidth()*41/88, getHeight()*3/50);	
		paintP1(g);
		paintP2(g);
		paintDeck(g);
		if(turnsP1 < 0 && turnsP2 < 0)
		{
			g.setFont(new Font("Ariel", Font.PLAIN, 40));
			g.drawString("flip remaining cards", getWidth()*145/352, getHeight()*3/50);
			g.setFont(new Font("Ariel", Font.PLAIN, 45));
			doesRoundEnd();
		}
		if(roundEnd)
		{
			g.drawImage(table, 0, 0, getWidth(), getHeight(), null);
			g.setColor(Color.BLACK);
			g.drawString("Round over, click below to continue", getWidth()*100/300, getHeight()*1/3);
			g.drawImage(next, 650, 450, 600, 300, null);
		}
		
		if(gameEnd)
		{
			if(totalScoreP1 > totalScoreP2)
			{
				g.drawImage(table, 0, 0, getWidth(), getHeight(), null);
				g.setColor(Color.BLACK);
				g.drawString("P2 wins with " + Integer.toString(totalScoreP2) + " points", getWidth()*115/300, getHeight()*1/2);
				g.drawString("P1 had " + Integer.toString(totalScoreP1) + " points", getWidth()*1230/3000, getHeight()*57/100);
				g.drawImage(again, 640, 600, 600, 300, null);
			}
			else if(totalScoreP2 > totalScoreP1)
			{
				g.drawImage(table, 0, 0, getWidth(), getHeight(), null);
				g.setColor(Color.BLACK);
				g.drawString("P1 wins with " + Integer.toString(totalScoreP1) + " points", getWidth()*115/300, getHeight()*1/2);
				g.drawString("P2 had " + Integer.toString(totalScoreP2) + " points", getWidth()*1230/3000, getHeight()*57/100);
				g.drawImage(again, 640, 600, 600, 300, null);
			}
		}
	}
	
	public void paintP1(Graphics g)
	{
		g.drawImage(downCardsP1[0][0].getFace(), 0, 0, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP1[0][1].getFace(), getWidth()/10, 0, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP1[0][2].getFace(), getWidth()*2/10, 0, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP1[0][3].getFace(), getWidth()*3/10, 0, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP1[1][0].getFace(), 0, getHeight()*1/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP1[1][1].getFace(), getWidth()/10, getHeight()*1/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP1[1][2].getFace(), getWidth()*2/10, getHeight()*1/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP1[1][3].getFace(), getWidth()*3/10, getHeight()*1/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP1[2][0].getFace(), 0, getHeight()*2/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP1[2][1].getFace(), getWidth()/10, getHeight()*2/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP1[2][2].getFace(), getWidth()*2/10, getHeight()*2/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP1[2][3].getFace(), getWidth()*3/10, getHeight()*2/3, getWidth()/10, getHeight()/3, null);
	}
	
	public void paintP2(Graphics g)
	{
		g.drawImage(downCardsP2[0][0].getFace(), getWidth()*6/10, 0, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP2[0][1].getFace(), getWidth()*7/10, 0, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP2[0][2].getFace(), getWidth()*8/10, 0, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP2[0][3].getFace(), getWidth()*9/10, 0, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP2[1][0].getFace(), getWidth()*6/10, getHeight()*1/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP2[1][1].getFace(), getWidth()*7/10, getHeight()*1/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP2[1][2].getFace(), getWidth()*8/10, getHeight()*1/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP2[1][3].getFace(), getWidth()*9/10, getHeight()*1/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP2[2][0].getFace(), getWidth()*6/10, getHeight()*2/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP2[2][1].getFace(), getWidth()*7/10, getHeight()*2/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP2[2][2].getFace(), getWidth()*8/10, getHeight()*2/3, getWidth()/10, getHeight()/3, null);
		g.drawImage(downCardsP2[2][3].getFace(), getWidth()*9/10, getHeight()*2/3, getWidth()/10, getHeight()/3, null);
	}
	
	public void paintDeck(Graphics g)
	{
		g.drawImage(draw.getFace(), getWidth()*5/11, getHeight()*1/6, getWidth()/10, getHeight()/3, null);
		g.drawImage(discard.getFace(), getWidth()*5/11, getHeight()*3/6, getWidth()/10, getHeight()/3, null);
	}
	
	public void checkTurns()
	{
		for(int i=0; i < 12; i++)
        {
        	if(clickedAreasP1[i] == true)
        	{
        		flippedCardsP1++;
        	}
        	if(clickedAreasP2[i] == true)
        	{
        		flippedCardsP2++;
        	}
        }
        if(flippedCardsP1 == 12)
        {
        	turnsP2--;
        	turnsP1 = -1;
        	p1FinishFirst = true;
        }
        else if(flippedCardsP2 == 12)
        {
        	turnsP1--;
        	turnsP2 = -1;
        	p1FinishFirst = false;
        }
        flippedCardsP1 = 0;
        flippedCardsP2 = 0;
	}
	
	public boolean allCardsFlippedP1()
	{
		int cnt = 0;
		for(int i = 0; i < 12; i++)
		{
			if(clickedAreasP1[i])
				cnt++;
		}
		if(cnt == 12)
			return true;
		else
			return false;
	}
	
	public boolean allCardsFlippedP2()
	{
		int cnt = 0;
		for(int i = 0; i < 12; i++)
		{
			if(clickedAreasP2[i])
				cnt++;
		}
		if(cnt == 12)
			return true;
		else
			return false;
	}
	
	public void doesRoundEnd()
	{
		if(allCardsFlippedP1() && allCardsFlippedP2())
			roundEnd = true;
		else
			roundEnd = false;
	}
	
	public void newRound()
	{
		roundEnd = false;
		
		deck2.clear();
		for(int i = 0; i < 5; i++){deck2.add(new Card(cm2, -2));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(cm1, -1));}
		for(int i = 0; i < 15; i++){deck2.add(new Card(c0, 0));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c1, 1));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c2, 2));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c3, 3));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c4, 4));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c5, 5));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c6, 6));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c7, 7));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c8, 8));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c9, 9));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c10, 10));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c11, 11));}
		for(int i = 0; i < 10; i++){deck2.add(new Card(c12, 12));}
		
		discardPile.clear();
		int rand = (int)(Math.random()*deck2.size());
		discard = new Card(deck2.remove(rand).getFace(), deck2.remove(rand).getValue());
		discardPile.add(new Card(cb, 0));
		discardPile.add(discard);
		
		draw = new Card(cb, 0);
		
		for(int i = 0; i < 12; i++){clickedAreasP1[i] = false;}
		for(int i = 0; i < 12; i++){clickedAreasP2[i] = false;}
		
		for(int i = 0; i < 12; i++){goneP1[i] = false;}
		for(int i = 0; i < 12; i++){goneP2[i] = false;}
		
		for(int i = 0; i < 3; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				int rand2 = (int)(Math.random()*deck2.size());
				p1[i][j] = deck2.remove(rand2);
			}
		}
		for(int i = 0; i < 3; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				downCardsP1[i][j] = new Card(cb, 0);
			}
		}
		for(int i = 0; i < 3; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				downCardsP2[i][j] = new Card(cb, 0);
			}
		}
		for(int i = 0; i < 3; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				int rand2 = (int)(Math.random()*deck2.size());
				p2[i][j] = deck2.remove(rand2);
			}
		}
		
		timeToDraw = false;
		pTurn = true;
		whoStarts1 = true;
		whoStarts2 = true;
		
		if(p1FinishFirst && scoreP1 > scoreP2)
		{
			totalScoreP1 += scoreP1;
		}
		else if(!p1FinishFirst && scoreP1 < scoreP2)
		{
			totalScoreP2 += scoreP2;
		}
		if(totalScoreP1 >= 100 || totalScoreP2 >= 100)
			gameEnd = true;
		
		scoreP1 = 0;
		scoreP2 = 0;
		
		draw2 = 0;
		draw22 = 0;
		
		selectCard1 = false;
		selectCard2 = false;
		
		intro = true;
		cnt = 0;
		flip = false;
		flippedCardsP1 = 0;
		flippedCardsP2 = 0;
		turnsP1 = 1;
		turnsP2 = 1;
	}
	
	
	public void mousePressed(MouseEvent e)   { }
	public void mouseReleased(MouseEvent e)  { }
	public void mouseEntered(MouseEvent e)   { }
	public void mouseExited(MouseEvent e)    { }
	public void mouseClicked(MouseEvent e) {
	    int x = e.getX();
	    int y = e.getY();
	    System.out.println("loc is (" + x + "," + y + ")");
	    
	    
	    if (e.getButton() == MouseEvent.BUTTON1) {
	    	
	    	if(x >= 727 && x <= 1171 && y >= 674 && y <= 834 && gameEnd)
        	{
        		System.out.println("again");
        		JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
                topFrame.getContentPane().removeAll();
                topFrame.add(new SkyjoCardsPanel());
                topFrame.revalidate();
                topFrame.repaint();
        	}
	    	
	    	//p1 side cards
	        if (x >= 0 && y >= 0 && x <= getWidth()/10 && y <= getHeight()/3) {
	        	if(selectCard1 == true && !goneP1[0] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[0][0].getValue();
	        		totalScoreP1 -= downCardsP1[0][0].getValue();
        			if(downCardsP1[0][0].getFace() == cb)
        			{
        				discard = p1[0][0];
        				discardPile.add(p1[0][0]);
        			}
        			else
        			{
        				discard = downCardsP1[0][0];
        				discardPile.add(p1[0][0]);
        			}
	        		downCardsP1[0][0] = temp;
	        		scoreP1 += downCardsP1[0][0].getValue();
	        		totalScoreP1 += downCardsP1[0][0].getValue();
	        		selectCard1 = false;
	        		pTurn = false;
	        		timeToDraw = true;
	        		clickedAreasP1[0] = true;
	        		cnt--;
	        	}
	        	else if(!clickedAreasP1[0] && !goneP1[0] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[0] = true;
	            	downCardsP1[0][0] = p1[0][0];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[0][0].getValue();
	            	totalScoreP1 += downCardsP1[0][0].getValue();
	        	}
	        	if(downCardsP1[0][0].getValue() == downCardsP1[1][0].getValue() && downCardsP1[0][0].getValue() == downCardsP1[2][0].getValue() && clickedAreasP1[0] == true && clickedAreasP1[4] == true && clickedAreasP1[8] == true && turnsP1 >= 0)
	        	{
	        		downCardsP1[0][0].setFace(empty);
	        		goneP1[0] = true;
	        		downCardsP1[1][0].setFace(empty);
	        		goneP1[4] = true;
	        		downCardsP1[2][0].setFace(empty);
	        		goneP1[8] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][0].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][0].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[0] && !goneP1[0])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[0] = true;
	        		downCardsP1[0][0] = p1[0][0];
	        		scoreP1 += downCardsP1[0][0].getValue();
	        		totalScoreP1 += downCardsP1[0][0].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        	
	        } else if (x >= getWidth()/10 && y >= 0 && x <= getWidth()*2/10 && y <= getHeight()/3) {
	        	//checkTurns();
	        	if(selectCard1 == true && !goneP1[1] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[0][1].getValue();
	        		totalScoreP1 -= downCardsP1[0][1].getValue();
        			if(downCardsP1[0][1].getFace() == cb)
        			{
        				discard = p1[0][1];
        				discardPile.add(p1[0][1]);
        			}
        			else
        			{
        				discard = downCardsP1[0][1];
        				discardPile.add(p1[0][1]);
        			}
	        		downCardsP1[0][1] = temp;
	        		scoreP1 += downCardsP1[0][1].getValue();
	        		totalScoreP1 += downCardsP1[0][1].getValue();
	        		selectCard1 = false;
	        		pTurn = false;
	        		timeToDraw = true;
	        		clickedAreasP1[1] = true;
	        		cnt--;
	        	}
	        	else if(!clickedAreasP1[1] && !goneP1[1] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[1] = true;
	            	downCardsP1[0][1] = p1[0][1];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[0][1].getValue();
	            	totalScoreP1 += downCardsP1[0][1].getValue();
	        	}
	        	if(downCardsP1[0][1].getValue() == downCardsP1[1][1].getValue() && downCardsP1[0][1].getValue() == downCardsP1[2][1].getValue() && clickedAreasP1[1] == true && clickedAreasP1[5] == true && clickedAreasP1[9] == true)
	        	{
	        		downCardsP1[0][1].setFace(empty);
	        		goneP1[1] = true;
	        		downCardsP1[1][1].setFace(empty);
	        		goneP1[5] = true;
	        		downCardsP1[2][1].setFace(empty);
	        		goneP1[9] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][1].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][1].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[1] && !goneP1[1])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[1] = true;
	        		downCardsP1[0][1] = p1[0][1];
	        		scoreP1 += downCardsP1[0][1].getValue();
	        		totalScoreP1 += downCardsP1[0][1].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        } else if (x >= getWidth()*2/10 && y >= 0 && x <= getWidth()*3/10 && y <= getHeight()/3) {
	        	//checkTurns();
	        	if(selectCard1 == true && !goneP1[2] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[0][2].getValue();
	        		totalScoreP1 -= downCardsP1[0][2].getValue();
        			if(downCardsP1[0][2].getFace() == cb)
        			{
        				discard = p1[0][2];
        				discardPile.add(p1[0][2]);
        			}
        			else
        			{
        				discard = downCardsP1[0][2];
        				discardPile.add(p1[0][2]);
        			}
	        		downCardsP1[0][2] = temp;
	        		scoreP1 += downCardsP1[0][2].getValue();
	        		totalScoreP1 += downCardsP1[0][2].getValue();
	        		selectCard1 = false;
	        		pTurn = false;
	        		timeToDraw = true;
	        		clickedAreasP1[2] = true;
	        		cnt--;
	        	}
	        	else if(!clickedAreasP1[2] && !goneP1[2] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[2] = true;
	            	downCardsP1[0][2] = p1[0][2];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[0][2].getValue();
	            	totalScoreP1 += downCardsP1[0][2].getValue();
	        	}
	        	if(downCardsP1[0][2].getValue() == downCardsP1[1][2].getValue() && downCardsP1[0][2].getValue() == downCardsP1[2][2].getValue() && clickedAreasP1[2] == true && clickedAreasP1[6] == true && clickedAreasP1[10] == true)
	        	{
	        		downCardsP1[0][2].setFace(empty);
	        		goneP1[2] = true;
	        		downCardsP1[1][2].setFace(empty);
	        		goneP1[6] = true;
	        		downCardsP1[2][2].setFace(empty);
	        		goneP1[10] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][2].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][2].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[2] && !goneP1[2])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[2] = true;
	        		downCardsP1[0][2] = p1[0][2];
	        		scoreP1 += downCardsP1[0][2].getValue();
	        		totalScoreP1 += downCardsP1[0][2].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        } else if (x >= getWidth()*3/10 && y >= 0 && x <= getWidth()*4/10 && y <= getHeight()/3) {
	        	//checkTurns();
	        	if(selectCard1 == true && !goneP1[3] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[0][3].getValue();
	        		totalScoreP1 -= downCardsP1[0][3].getValue();
        			if(downCardsP1[0][3].getFace() == cb)
        			{
        				discard = p1[0][3];
        				discardPile.add(p1[0][3]);
        			}
        			else
        			{
        				discard = downCardsP1[0][3];
        				discardPile.add(p1[0][3]);
        			}
	        		downCardsP1[0][3] = temp;
	        		scoreP1 += downCardsP1[0][3].getValue();
	        		totalScoreP1 += downCardsP1[0][3].getValue();
	        		selectCard1 = false;
	        		pTurn = false;
	        		timeToDraw = true;
	        		clickedAreasP1[3] = true;
	        		cnt--;

	        	}
	        	else if(!clickedAreasP1[3] && !goneP1[3] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[3] = true;
	            	downCardsP1[0][3] = p1[0][3];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[0][3].getValue();
	            	totalScoreP1 += downCardsP1[0][3].getValue();
	        	}
	        	if(downCardsP1[0][3].getValue() == downCardsP1[1][3].getValue() && downCardsP1[0][3].getValue() == downCardsP1[2][3].getValue() && clickedAreasP1[3] == true && clickedAreasP1[7] == true && clickedAreasP1[11] == true)
	        	{
	        		downCardsP1[0][3].setFace(empty);
	        		goneP1[3] = true;
	        		downCardsP1[1][3].setFace(empty);
	        		goneP1[7] = true;
	        		downCardsP1[2][3].setFace(empty);
	        		goneP1[11] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][3].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][3].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[3] && !goneP1[3])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[3] = true;
	        		downCardsP1[0][3] = p1[0][3];
	        		scoreP1 += downCardsP1[0][3].getValue();
	        		totalScoreP1 += downCardsP1[0][3].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        } else if (x >= 0 && y >= getHeight()/3 && x <= getWidth()/10 && y <= getHeight()*2/3) {
	        	//checkTurns();
	        	if(selectCard1 == true && !goneP1[4] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[1][0].getValue();
	        		totalScoreP1 -= downCardsP1[1][0].getValue();
        			if(downCardsP1[1][0].getFace() == cb)
        			{
        				discard = p1[1][0];
        				discardPile.add(p1[1][0]);
        			}
        			else
        			{
        				discard = downCardsP1[1][0];
        				discardPile.add(p1[1][0]);
        			}
	        		downCardsP1[1][0] = temp;
	        		scoreP1 += downCardsP1[1][0].getValue();
	        		totalScoreP1 += downCardsP1[1][0].getValue();
	        		selectCard1 = false;
	        		timeToDraw = true;
	        		pTurn = false;
	        		clickedAreasP1[4] = true;
	        		cnt--;
	        	}
	        	else if(!clickedAreasP1[4] && !goneP1[4] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[4] = true;
	            	downCardsP1[1][0] = p1[1][0];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[1][0].getValue();
	            	totalScoreP1 += downCardsP1[1][0].getValue();
	        	}
	        	if(downCardsP1[0][0].getValue() == downCardsP1[1][0].getValue() && downCardsP1[0][0].getValue() == downCardsP1[2][0].getValue() && clickedAreasP1[4] == true && clickedAreasP1[0] == true && clickedAreasP1[8] == true)
	        	{
	        		downCardsP1[0][0].setFace(empty);
	        		goneP1[0] = true;
	        		downCardsP1[1][0].setFace(empty);
	        		goneP1[4] = true;
	        		downCardsP1[2][0].setFace(empty);
	        		goneP1[8] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][0].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][0].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[4] && !goneP1[4])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[4] = true;
	        		downCardsP1[1][0] = p1[1][0];
	        		scoreP1 += downCardsP1[1][0].getValue();
	        		totalScoreP1 += downCardsP1[1][0].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        } else if (x >= getWidth()/10 && y >= getHeight()/3 && x <= getWidth()*2/10 && y <= getHeight()*2/3) {
	        	//checkTurns();
	        	if(selectCard1 == true && !goneP1[5] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[1][1].getValue();
	        		totalScoreP1 -= downCardsP1[1][1].getValue();
        			if(downCardsP1[1][1].getFace() == cb)
        			{
        				discard = p1[1][1];
        				discardPile.add(p1[1][1]);
        			}
        			else
        			{
        				discard = downCardsP1[1][1];
        				discardPile.add(p1[1][1]);
        			}
	        		downCardsP1[1][1] = temp;
	        		scoreP1 += downCardsP1[1][1].getValue();
	        		totalScoreP1 += downCardsP1[1][1].getValue();
	        		selectCard1 = false;
	        		timeToDraw = true;
	        		pTurn = false;
	        		clickedAreasP1[5] = true;
	        		cnt--;
	        	}
	        	else if(!clickedAreasP1[5] && !goneP1[5] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[5] = true;
	            	downCardsP1[1][1] = p1[1][1];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[1][1].getValue();
	            	totalScoreP1 += downCardsP1[1][1].getValue();
	        	}
	        	if(downCardsP1[0][1].getValue() == downCardsP1[1][1].getValue() && downCardsP1[0][1].getValue() == downCardsP1[2][1].getValue() && clickedAreasP1[5] == true && clickedAreasP1[1] == true && clickedAreasP1[9] == true)
	        	{
	        		downCardsP1[0][1].setFace(empty);
	        		goneP1[1] = true;
	        		downCardsP1[1][1].setFace(empty);
	        		goneP1[5] = true;
	        		downCardsP1[2][1].setFace(empty);
	        		goneP1[9] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][1].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][1].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[5] && !goneP1[5])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[5] = true;
	        		downCardsP1[1][1] = p1[1][1];
	        		scoreP1 += downCardsP1[1][1].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        } else if (x >= getWidth()*2/10 && y >= getHeight()/3 && x <= getWidth()*3/10 && y <= getHeight()*2/3) {
	        	//checkTurns();
	        	if(selectCard1 == true && !goneP1[6] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[1][2].getValue();
	        		totalScoreP1 -= downCardsP1[1][2].getValue();
        			if(downCardsP1[1][2].getFace() == cb)
        			{
        				discard = p1[1][2];
        				discardPile.add(p1[1][2]);
        			}
        			else
        			{
        				discard = downCardsP1[1][2];
        				discardPile.add(p1[1][2]);
        			}
	        		downCardsP1[1][2] = temp;
	        		scoreP1 += downCardsP1[1][2].getValue();
	        		totalScoreP1 += downCardsP1[1][2].getValue();
	        		selectCard1 = false;
	        		pTurn = false;
	        		timeToDraw = true;
	        		clickedAreasP1[6] = true;
	        		cnt--;
	        	}
	        	else if(!clickedAreasP1[6] && !goneP1[6] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[6] = true;
	            	downCardsP1[1][2] = p1[1][2];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[1][2].getValue();
	            	totalScoreP1 += downCardsP1[1][2].getValue();
	        	}
	        	if(downCardsP1[0][2].getValue() == downCardsP1[1][2].getValue() && downCardsP1[0][2].getValue() == downCardsP1[2][2].getValue() && clickedAreasP1[6] == true && clickedAreasP1[2] == true && clickedAreasP1[10] == true)
	        	{
	        		downCardsP1[0][2].setFace(empty);
	        		goneP1[2] = true;
	        		downCardsP1[1][2].setFace(empty);
	        		goneP1[6] = true;
	        		downCardsP1[2][2].setFace(empty);
	        		goneP1[10] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][2].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][2].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[6] && !goneP1[6])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[6] = true;
	        		downCardsP1[1][2] = p1[1][2];
	        		scoreP1 += downCardsP1[1][2].getValue();
	        		totalScoreP1 += downCardsP1[1][2].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        } else if (x >= getWidth()*3/10 && y >= getHeight()/3 && x <= getWidth()*4/10 && y <= getHeight()*2/3) {
	        	//checkTurns();
	        	if(selectCard1 == true && !goneP1[7] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[1][3].getValue();
	        		totalScoreP1 -= downCardsP1[1][3].getValue();
        			if(downCardsP1[1][3].getFace() == cb)
        			{
        				discard = p1[1][3];
        				discardPile.add(p1[1][3]);
        			}
        			else
        			{
        				discard = downCardsP1[1][3];
        				discardPile.add(p1[1][3]);
        			}
	        		downCardsP1[1][3] = temp;
	        		scoreP1 += downCardsP1[1][3].getValue();
	        		totalScoreP1 += downCardsP1[1][3].getValue();
	        		selectCard1 = false;
	        		timeToDraw = true;
	        		pTurn = false;
	        		clickedAreasP1[7] = true;
	        		cnt--;
	        	}
	        	else if(!clickedAreasP1[7] && !goneP1[7] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[7] = true;
	            	downCardsP1[1][3] = p1[1][3];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[1][3].getValue();
	            	totalScoreP1 += downCardsP1[1][3].getValue();
	        	}
	        	if(downCardsP1[0][3].getValue() == downCardsP1[1][3].getValue() && downCardsP1[0][3].getValue() == downCardsP1[2][3].getValue() && clickedAreasP1[7] == true && clickedAreasP1[11] == true && clickedAreasP1[3] == true)
	        	{
	        		downCardsP1[0][3].setFace(empty);
	        		goneP1[3] = true;
	        		downCardsP1[1][3].setFace(empty);
	        		goneP1[7] = true;
	        		downCardsP1[2][3].setFace(empty);
	        		goneP1[11] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][3].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][3].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[7] && !goneP1[7])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[7] = true;
	        		downCardsP1[1][3] = p1[1][3];
	        		scoreP1 += downCardsP1[1][3].getValue();
	        		totalScoreP1 += downCardsP1[1][3].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        } else if (x >= 0 && y >= getHeight()*2/3 && x <= getWidth()/10 && y <= getHeight() && pTurn) {
	        	//checkTurns();
	        	if(selectCard1 == true && !goneP1[8] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[2][0].getValue();
	        		totalScoreP1 -= downCardsP1[2][0].getValue();
        			if(downCardsP1[2][0].getFace() == cb)
        			{
        				discard = p1[2][0];
        				discardPile.add(p1[2][0]);
        			}
        			else
        			{
        				discard = downCardsP1[2][0];
        				discardPile.add(p1[2][0]);
        			}
	        		downCardsP1[2][0] = temp;
	        		scoreP1 += downCardsP1[2][0].getValue();
	        		totalScoreP1 += downCardsP1[2][0].getValue();
	        		selectCard1 = false;
	        		timeToDraw = true;
	        		pTurn = false;
	        		clickedAreasP1[8] = true;
	        		cnt--;
	        	}
	        	else if(!clickedAreasP1[8] && !goneP1[8] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[8] = true;
	            	downCardsP1[2][0] = p1[2][0];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[2][0].getValue();
	            	totalScoreP1 += downCardsP1[2][0].getValue();
	        	}
	        	if(downCardsP1[0][0].getValue() == downCardsP1[1][0].getValue() && downCardsP1[0][0].getValue() == downCardsP1[2][0].getValue() && clickedAreasP1[8] == true && clickedAreasP1[0] == true && clickedAreasP1[4] == true)
	        	{
	        		downCardsP1[0][0].setFace(empty);
	        		goneP1[0] = true;
	        		downCardsP1[1][0].setFace(empty);
	        		goneP1[4] = true;
	        		downCardsP1[2][0].setFace(empty);
	        		goneP1[8] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][0].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][0].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[8] && !goneP1[8])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[8] = true;
	        		downCardsP1[2][0] = p1[2][0];
	        		scoreP1 += downCardsP1[2][0].getValue();
	        		totalScoreP1 += downCardsP1[2][0].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        } else if (x >= getWidth()/10 && y >= getHeight()*2/3 && x <= getWidth()*2/10 && y <= getHeight() && pTurn) {
	        	//checkTurns();
	        	if(selectCard1 == true && !goneP1[9] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[2][1].getValue();
	        		totalScoreP1 -= downCardsP1[2][1].getValue();
        			if(downCardsP1[2][1].getFace() == cb)
        			{
        				discard = p1[2][1];
        				discardPile.add(p1[2][1]);
        			}
        			else
        			{
        				discard = downCardsP1[2][1];
        				discardPile.add(p1[2][1]);
        			}
	        		downCardsP1[2][1] = temp;
	        		scoreP1 += downCardsP1[2][1].getValue();
	        		totalScoreP1 += downCardsP1[2][1].getValue();
	        		selectCard1 = false;
	        		timeToDraw = true;
	        		pTurn = false;
	        		clickedAreasP1[9] = true;
	        		cnt--;
	        	}
	        	else if(!clickedAreasP1[9] && !goneP1[9] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[9] = true;
	            	downCardsP1[2][1] = p1[2][1];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[2][1].getValue();
	            	totalScoreP1 += downCardsP1[2][1].getValue();
	        	}
	        	if(downCardsP1[0][1].getValue() == downCardsP1[1][1].getValue() && downCardsP1[0][1].getValue() == downCardsP1[2][1].getValue() && clickedAreasP1[9] == true && clickedAreasP1[5] == true && clickedAreasP1[1] == true)
	        	{
	        		downCardsP1[0][1].setFace(empty);
	        		goneP1[1] = true;
	        		downCardsP1[1][1].setFace(empty);
	        		goneP1[5] = true;
	        		downCardsP1[2][1].setFace(empty);
	        		goneP1[9] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][1].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][1].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[9] && !goneP1[9])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[9] = true;
	        		downCardsP1[2][1] = p1[2][1];
	        		scoreP1 += downCardsP1[2][1].getValue();
	        		totalScoreP1 += downCardsP1[2][1].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        } else if (x >= getWidth()*2/10 && y >= getHeight()*2/3 && x <= getWidth()*3/10 && y <= getHeight()) {
	        	//checkTurns();
	        	if(selectCard1 == true && !goneP1[10] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[2][2].getValue();
	        		totalScoreP1 -= downCardsP1[2][2].getValue();
        			if(downCardsP1[2][2].getFace() == cb)
        			{
        				discard = p1[2][2];
        				discardPile.add(p1[2][2]);
        			}
        			else
        			{
        				discard = downCardsP1[2][2];
        				discardPile.add(p1[2][2]);
        			}
	        		downCardsP1[2][2] = temp;
	        		scoreP1 += downCardsP1[2][2].getValue();
	        		totalScoreP1 += downCardsP1[2][2].getValue();
	        		selectCard1 = false;
	        		timeToDraw = true;
	        		pTurn = false;
	        		clickedAreasP1[10] = true;
	        		cnt--;
	        	}
	        	else if(!clickedAreasP1[10] && !goneP1[10] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[10] = true;
	            	downCardsP1[2][2] = p1[2][2];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[2][2].getValue();
	            	totalScoreP1 += downCardsP1[2][2].getValue();
	        	}
	        	if(downCardsP1[0][2].getValue() == downCardsP1[1][2].getValue() && downCardsP1[0][2].getValue() == downCardsP1[2][2].getValue() && clickedAreasP1[10] == true && clickedAreasP1[6] == true && clickedAreasP1[2] == true)
	        	{
	        		downCardsP1[0][2].setFace(empty);
	        		goneP1[2] = true;
	        		downCardsP1[1][2].setFace(empty);
	        		goneP1[6] = true;
	        		downCardsP1[2][2].setFace(empty);
	        		goneP1[10] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][2].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][2].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[10] && !goneP1[10])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[10] = true;
	        		downCardsP1[2][2] = p1[2][2];
	        		scoreP1 += downCardsP1[2][2].getValue();
	        		totalScoreP1 += downCardsP1[2][2].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        } else if (x >= getWidth()*3/10 && y >= getHeight()*2/3 && x <= getWidth()*4/10 && y <= getHeight()) {
	        	//checkTurns();
	        	if(selectCard1 == true && !goneP1[11] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		scoreP1 -= downCardsP1[2][3].getValue();
	        		totalScoreP1 -= downCardsP1[2][3].getValue();
        			if(downCardsP1[2][3].getFace() == cb)
        			{
        				discard = p1[2][3];
        				discardPile.add(p1[2][3]);
        			}
        			else
        			{
        				discard = downCardsP1[2][3];
        				discardPile.add(p1[2][3]);
        			}
	        		downCardsP1[2][3] = temp;
	        		scoreP1 += downCardsP1[2][3].getValue();
	        		totalScoreP1 += downCardsP1[2][3].getValue();
	        		selectCard1 = false;
	        		pTurn = false;
	        		timeToDraw = true;
	        		clickedAreasP1[11] = true;
	        		cnt--;
	        	}
	        	else if(!clickedAreasP1[11] && !goneP1[11] && turnsP1 >= 0 && !timeToDraw && pTurn)
	        	{
	        		flip = false;
	        		clickedAreasP1[11] = true;
	            	downCardsP1[2][3] = p1[2][3];
	            	pTurn = false;
	            	timeToDraw = true;
	            	if(whoStarts1 == true)
	            	{
	            		pTurn = true;
	            		timeToDraw = false;
	            		whoStarts1 = false;
	            	}
        			if(draw2 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw2++;
	            	}
	            	scoreP1 += downCardsP1[2][3].getValue();
	            	totalScoreP1 += downCardsP1[2][3].getValue();
	        	}
	        	if(downCardsP1[0][3].getValue() == downCardsP1[1][3].getValue() && downCardsP1[0][3].getValue() == downCardsP1[2][3].getValue() && clickedAreasP1[11] == true && clickedAreasP1[7] == true && clickedAreasP1[3] == true)
	        	{
	        		downCardsP1[0][3].setFace(empty);
	        		goneP1[3] = true;
	        		downCardsP1[1][3].setFace(empty);
	        		goneP1[7] = true;
	        		downCardsP1[2][3].setFace(empty);
	        		goneP1[11] = true;
	        		scoreP1 = scoreP1 - (3 * downCardsP1[0][3].getValue());
	        		totalScoreP1 = totalScoreP1 - (3 * downCardsP1[0][3].getValue());
	        	}
	        	checkTurns();
	        	if(turnsP1 <= -1 && !clickedAreasP1[11] && !goneP1[11])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP1[11] = true;
	        		downCardsP1[2][3] = p1[2][3];
	        		scoreP1 += downCardsP1[2][3].getValue();
	        		totalScoreP1 += downCardsP1[2][3].getValue();
	        		if(!allCardsFlippedP1())
	        			pTurn = true;
	        		if(allCardsFlippedP1())
	        			pTurn = false;
	        		doesRoundEnd();
	        	}
	        }
	        
	        //p2 side cards
        	else if (x >= getWidth()*6/10 && y >= 0 && x <= getWidth()*7/10 && y <= getHeight()/3) {
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[0] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[0][0].getValue();
        			totalScoreP2 -= downCardsP2[0][0].getValue();
        			if(downCardsP2[0][0].getFace() == cb)
        			{
        				discard = p2[0][0];
        				discardPile.add(p2[0][0]);
        			}
        			else
        			{
        				discard = downCardsP2[0][0];
        				discardPile.add(p2[0][0]);
        			}
        			downCardsP2[0][0] = temp;
        			scoreP2 += downCardsP2[0][0].getValue();
        			totalScoreP2 += downCardsP2[0][0].getValue();
	        		selectCard2 = false;
	        		pTurn = true;
	        		timeToDraw = true;
	        		clickedAreasP2[0] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[0] && !goneP2[0] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[0] = true;
        			downCardsP2[0][0] = p2[0][0];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[0][0].getValue();
	            	totalScoreP2 += downCardsP2[0][0].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        		}
        		if(downCardsP2[0][0].getValue() == downCardsP2[1][0].getValue() && downCardsP2[0][0].getValue() == downCardsP2[2][0].getValue() && clickedAreasP2[0] == true && clickedAreasP2[4] == true && clickedAreasP2[8] == true)
	        	{
	        		downCardsP2[0][0].setFace(empty);
	        		goneP2[0] = true;
	        		downCardsP2[1][0].setFace(empty);
	        		goneP2[4] = true;
	        		downCardsP2[2][0].setFace(empty);
	        		goneP2[8] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][0].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][0].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[0] && !goneP2[0])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[0] = true;
	        		downCardsP2[0][0] = p2[0][0];
	        		scoreP2 += downCardsP2[0][0].getValue();
	        		totalScoreP2 += downCardsP2[0][0].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} else if (x >= getWidth()*7/10 && y >= 0 && x <= getWidth()*8/10 && y <= getHeight()/3) {
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[1] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[0][1].getValue();
        			totalScoreP2 -= downCardsP2[0][1].getValue();
        			if(downCardsP2[0][1].getFace() == cb)
        			{
        				discard = p2[0][1];
        				discardPile.add(p2[0][1]);
        			}
        			else
        			{
        				discard = downCardsP2[0][1];
        				discardPile.add(p2[0][1]);
        			}
        			downCardsP2[0][1] = temp;
        			scoreP2 += downCardsP2[0][1].getValue();
        			totalScoreP2 += downCardsP2[0][1].getValue();
	        		selectCard2 = false;
	        		timeToDraw = true;
	        		pTurn = true;
	        		clickedAreasP2[1] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[1] && !goneP2[1] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[1] = true;
        			downCardsP2[0][1] = p2[0][1];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[0][1].getValue();
	            	totalScoreP2 += downCardsP2[0][1].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        			
        		}
        		if(downCardsP2[0][1].getValue() == downCardsP2[1][1].getValue() && downCardsP2[0][1].getValue() == downCardsP2[2][1].getValue() && clickedAreasP2[1] == true && clickedAreasP2[5] == true && clickedAreasP2[9] == true)
	        	{
	        		downCardsP2[0][1].setFace(empty);
	        		goneP2[1] = true;
	        		downCardsP2[1][1].setFace(empty);
	        		goneP2[5] = true;
	        		downCardsP2[2][1].setFace(empty);
	        		goneP2[9] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][1].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][1].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[1] && !goneP2[1])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[1] = true;
	        		downCardsP2[0][1] = p2[0][1];
	        		scoreP2 += downCardsP2[0][1].getValue();
	        		totalScoreP2 += downCardsP2[0][1].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} else if (x >= getWidth()*8/10 && y >= 0 && x <= getWidth()*9/10 && y <= getHeight()/3) {
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[2] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[0][2].getValue();
        			totalScoreP2 -= downCardsP2[0][2].getValue();
        			if(downCardsP2[0][2].getFace() == cb)
        			{
        				discard = p2[0][2];
        				discardPile.add(p2[0][2]);
        			}
        			else
        			{
        				discard = downCardsP2[0][2];
        				discardPile.add(p2[0][2]);
        			}
        			downCardsP2[0][2] = temp;
        			scoreP2 += downCardsP2[0][2].getValue();
        			totalScoreP2 += downCardsP2[0][2].getValue();
	        		selectCard2 = false;
	        		timeToDraw = true;
	        		pTurn = true;
	        		clickedAreasP2[2] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[2] && !goneP2[2] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[2] = true;
        			downCardsP2[0][2] = p2[0][2];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[0][2].getValue();
	            	totalScoreP2 += downCardsP2[0][2].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        			
        		}
        		if(downCardsP2[0][2].getValue() == downCardsP2[1][2].getValue() && downCardsP2[0][2].getValue() == downCardsP2[2][2].getValue() && clickedAreasP2[2] == true && clickedAreasP2[6] == true && clickedAreasP2[10] == true)
	        	{
	        		downCardsP2[0][2].setFace(empty);
	        		goneP2[2] = true;
	        		downCardsP2[1][2].setFace(empty);
	        		goneP2[6] = true;
	        		downCardsP2[2][2].setFace(empty);
	        		goneP2[10] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][2].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][2].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[2] && !goneP2[2])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[2] = true;
	        		downCardsP2[0][2] = p2[0][2];
	        		scoreP2 += downCardsP2[0][2].getValue();
	        		totalScoreP2 += downCardsP2[0][2].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} else if (x >= getWidth()*9/10 && y >= 0 && x <= getWidth() && y <= getHeight()/3) {
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[3] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[0][3].getValue();
        			totalScoreP2 -= downCardsP2[0][3].getValue();
        			if(downCardsP2[0][3].getFace() == cb)
        			{
        				discard = p2[0][3];
        				discardPile.add(p2[0][3]);
        			}
        			else
        			{
        				discard = downCardsP2[0][3];
        				discardPile.add(p2[0][3]);
        			}
        			downCardsP2[0][3] = temp;
        			scoreP2 += downCardsP2[0][3].getValue();
        			totalScoreP2 += downCardsP2[0][3].getValue();
	        		selectCard2 = false;
	        		pTurn = true;
	        		timeToDraw = true;
	        		clickedAreasP2[3] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[3] && !goneP2[3] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[3] = true;
        			downCardsP2[0][3] = p2[0][3];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[0][3].getValue();
	            	totalScoreP2 += downCardsP2[0][3].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        			
        		}
        		if(downCardsP2[0][3].getValue() == downCardsP2[1][3].getValue() && downCardsP2[0][3].getValue() == downCardsP2[2][3].getValue() && clickedAreasP2[3] == true && clickedAreasP2[7] == true && clickedAreasP2[11] == true)
	        	{
	        		downCardsP2[0][3].setFace(empty);
	        		goneP2[3] = true;
	        		downCardsP2[1][3].setFace(empty);
	        		goneP2[7] = true;
	        		downCardsP2[2][3].setFace(empty);
	        		goneP2[11] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][3].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][3].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[3] && !goneP2[3])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[3] = true;
	        		downCardsP2[0][3] = p2[0][3];
	        		scoreP2 += downCardsP2[0][3].getValue();
	        		totalScoreP2 += downCardsP2[0][3].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} else if (x >= getWidth()*6/10 && y >= getHeight()/3 && x <= getWidth()*7/10 && y <= getHeight()*2/3) {
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[4] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[1][0].getValue();
        			totalScoreP2 -= downCardsP2[1][0].getValue();
        			if(downCardsP2[1][0].getFace() == cb)
        			{
        				discard = p2[1][0];
        				discardPile.add(p2[1][0]);
        			}
        			else
        			{
        				discard = downCardsP2[1][0];
        				discardPile.add(p2[1][0]);
        			}
        			downCardsP2[1][0] = temp;
        			scoreP2 += downCardsP2[1][0].getValue();
        			totalScoreP2 += downCardsP2[1][0].getValue();
	        		selectCard2 = false;
	        		pTurn = true;
	        		timeToDraw = true;
	        		clickedAreasP2[4] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[4] && !goneP2[4] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[4] = true;
        			downCardsP2[1][0] = p2[1][0];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[1][0].getValue();
	            	totalScoreP2 += downCardsP2[1][0].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        			
        		}
        		if(downCardsP2[0][0].getValue() == downCardsP2[1][0].getValue() && downCardsP2[0][0].getValue() == downCardsP2[2][0].getValue() && clickedAreasP2[0] == true && clickedAreasP2[4] == true && clickedAreasP2[8] == true)
	        	{
	        		downCardsP2[0][0].setFace(empty);
	        		goneP2[0] = true;
	        		downCardsP2[1][0].setFace(empty);
	        		goneP2[4] = true;
	        		downCardsP2[2][0].setFace(empty);
	        		goneP2[8] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][0].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][0].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[4] && !goneP2[4])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[4] = true;
	        		downCardsP2[1][0] = p2[1][0];
	        		scoreP2 += downCardsP2[1][0].getValue();
	        		totalScoreP2 += downCardsP2[1][0].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} else if (x >= getWidth()*7/10 && y >= getHeight()/3 && x <= getWidth()*8/10 && y <= getHeight()*2/3) {
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[5] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[1][1].getValue();
        			totalScoreP2 -= downCardsP2[1][1].getValue();
        			if(downCardsP2[1][1].getFace() == cb)
        			{
        				discard = p2[1][1];
        				discardPile.add(p2[1][1]);
        			}
        			else
        			{
        				discard = downCardsP2[1][1];
        				discardPile.add(p2[1][1]);
        			}
        			downCardsP2[1][1] = temp;
        			scoreP2 += downCardsP2[1][1].getValue();
        			totalScoreP2 += downCardsP2[1][1].getValue();
	        		selectCard2 = false;
	        		timeToDraw = true;
	        		pTurn = true;
	        		clickedAreasP2[5] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[5] && !goneP2[5] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[5] = true;
        			downCardsP2[1][1] = p2[1][1];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[1][1].getValue();
	            	totalScoreP2 += downCardsP2[1][1].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        			
        		}
        		if(downCardsP2[0][1].getValue() == downCardsP2[1][1].getValue() && downCardsP2[0][1].getValue() == downCardsP2[2][1].getValue() && clickedAreasP2[1] == true && clickedAreasP2[5] == true && clickedAreasP2[9] == true)
	        	{
	        		downCardsP2[0][1].setFace(empty);
	        		goneP2[1] = true;
	        		downCardsP2[1][1].setFace(empty);
	        		goneP2[5] = true;
	        		downCardsP2[2][1].setFace(empty);
	        		goneP2[9] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][1].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][1].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[5] && !goneP2[5])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[5] = true;
	        		downCardsP2[1][1] = p2[1][1];
	        		scoreP2 += downCardsP2[1][1].getValue();
	        		totalScoreP2 += downCardsP2[1][1].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} else if (x >= getWidth()*8/10 && y >= getHeight()/3 && x <= getWidth()*9/10 && y <= getHeight()*2/3) {
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[6] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[1][2].getValue();
        			totalScoreP2 -= downCardsP2[1][2].getValue();
        			if(downCardsP2[1][2].getFace() == cb)
        			{
        				discard = p2[1][2];
        				discardPile.add(p2[1][2]);
        			}
        			else
        			{
        				discard = downCardsP2[1][2];
        				discardPile.add(p2[1][2]);
        			}
        			downCardsP2[1][2] = temp;
        			scoreP2 += downCardsP2[1][2].getValue();
        			totalScoreP2 += downCardsP2[1][2].getValue();
	        		selectCard2 = false;
	        		timeToDraw = true;
	        		pTurn = true;
	        		clickedAreasP2[6] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[6] && !goneP2[6] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[6] = true;
        			downCardsP2[1][2] = p2[1][2];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[1][2].getValue();
	            	totalScoreP2 += downCardsP2[1][2].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        			
        		}
        		if(downCardsP2[0][2].getValue() == downCardsP2[1][2].getValue() && downCardsP2[0][2].getValue() == downCardsP2[2][2].getValue() && clickedAreasP2[2] == true && clickedAreasP2[6] == true && clickedAreasP2[10] == true)
	        	{
	        		downCardsP2[0][2].setFace(empty);
	        		goneP2[2] = true;
	        		downCardsP2[1][2].setFace(empty);
	        		goneP2[6] = true;
	        		downCardsP2[2][2].setFace(empty);
	        		goneP2[10] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][2].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][2].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[6] && !goneP2[6])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[6] = true;
	        		downCardsP2[1][2] = p2[1][2];
	        		scoreP2 += downCardsP2[1][2].getValue();
	        		totalScoreP2 += downCardsP2[1][2].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} else if (x >= getWidth()*9/10 && y >= getHeight()/3 && x <= getWidth() && y <= getHeight()*2/3) {
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[7] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[1][3].getValue();
        			totalScoreP2 -= downCardsP2[1][3].getValue();
        			if(downCardsP2[1][3].getFace() == cb)
        			{
        				discard = p2[1][3];
        				discardPile.add(p2[1][3]);
        			}
        			else
        			{
        				discard = downCardsP2[1][3];
        				discardPile.add(p2[1][3]);
        			}
        			downCardsP2[1][3] = temp;
        			scoreP2 += downCardsP2[1][3].getValue();
        			totalScoreP2 += downCardsP2[1][3].getValue();
	        		selectCard2 = false;
	        		timeToDraw = true;
	        		pTurn = true;
	        		clickedAreasP2[7] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[7] && !goneP2[7] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[7] = true;
        			downCardsP2[1][3] = p2[1][3];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[1][3].getValue();
	            	totalScoreP2 += downCardsP2[1][3].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        			
        		}
        		if(downCardsP2[0][3].getValue() == downCardsP2[1][3].getValue() && downCardsP2[0][3].getValue() == downCardsP2[2][3].getValue() && clickedAreasP2[3] == true && clickedAreasP2[7] == true && clickedAreasP2[11] == true)
	        	{
	        		downCardsP2[0][3].setFace(empty);
	        		goneP2[3] = true;
	        		downCardsP2[1][3].setFace(empty);
	        		goneP2[7] = true;
	        		downCardsP2[2][3].setFace(empty);
	        		goneP2[11] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][3].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][3].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[7] && !goneP2[7])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[7] = true;
	        		downCardsP2[1][3] = p2[1][3];
	        		scoreP2 += downCardsP2[1][3].getValue();
	        		totalScoreP2 += downCardsP2[1][3].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} else if (x >= getWidth()*6/10 && y >= getHeight()*2/3 && x <= getWidth()*7/10 && y <= getHeight()){
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[8] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[2][0].getValue();
        			totalScoreP2 -= downCardsP2[2][0].getValue();
        			if(downCardsP2[2][0].getFace() == cb)
        			{
        				discard = p2[2][0];
        				discardPile.add(p2[2][0]);
        			}
        			else
        			{
        				discard = downCardsP2[2][0];
        				discardPile.add(p2[2][0]);
        			}
        			downCardsP2[2][0] = temp;
        			scoreP2 += downCardsP2[2][0].getValue();
        			totalScoreP2 += downCardsP2[2][0].getValue();
        			timeToDraw = true;
	        		selectCard2 = false;
	        		pTurn = true;
	        		clickedAreasP2[8] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[8] && !goneP2[8] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[8] = true;
        			downCardsP2[2][0] = p2[2][0];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[2][0].getValue();
	            	totalScoreP2 += downCardsP2[2][0].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        			
        		}
        		if(downCardsP2[0][0].getValue() == downCardsP2[1][0].getValue() && downCardsP2[0][0].getValue() == downCardsP2[2][0].getValue() && clickedAreasP2[0] == true && clickedAreasP2[4] == true && clickedAreasP2[8] == true)
	        	{
	        		downCardsP2[0][0].setFace(empty);
	        		goneP2[0] = true;
	        		downCardsP2[1][0].setFace(empty);
	        		goneP2[4] = true;
	        		downCardsP2[2][0].setFace(empty);
	        		goneP2[8] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][0].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][0].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[8] && !goneP2[8])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[8] = true;
	        		downCardsP2[2][0] = p2[2][0];
	        		scoreP2 += downCardsP2[2][0].getValue();
	        		totalScoreP2 += downCardsP2[2][0].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} else if (x >= getWidth()*7/10 && y >= getHeight()*2/3 && x <= getWidth()*8/10 && y <= getHeight()) {
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[9] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[2][1].getValue();
        			totalScoreP2 -= downCardsP2[2][1].getValue();
        			if(downCardsP2[2][1].getFace() == cb)
        			{
        				discard = p2[2][1];
        				discardPile.add(p2[2][1]);
        			}
        			else
        			{
        				discard = downCardsP2[2][1];
        				discardPile.add(p2[2][1]);
        			}
        			downCardsP2[2][1] = temp;
        			scoreP2 += downCardsP2[2][1].getValue();
        			totalScoreP2 += downCardsP2[2][1].getValue();
	        		selectCard2 = false;
	        		timeToDraw = true;
	        		pTurn = true;
	        		clickedAreasP2[9] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[9] && !goneP2[9] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[9] = true;
        			downCardsP2[2][1] = p2[2][1];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[2][1].getValue();
	            	totalScoreP2 += downCardsP2[2][1].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        			
        		}
        		if(downCardsP2[0][1].getValue() == downCardsP2[1][1].getValue() && downCardsP2[0][1].getValue() == downCardsP2[2][1].getValue() && clickedAreasP2[1] == true && clickedAreasP2[5] == true && clickedAreasP2[9] == true)
	        	{
	        		downCardsP2[0][1].setFace(empty);
	        		goneP2[1] = true;
	        		downCardsP2[1][1].setFace(empty);
	        		goneP2[5] = true;
	        		downCardsP2[2][1].setFace(empty);
	        		goneP2[9] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][1].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][1].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[9] && !goneP2[9])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[9] = true;
	        		downCardsP2[2][1] = p2[2][1];
	        		scoreP2 += downCardsP2[2][1].getValue();
	        		totalScoreP2 += downCardsP2[2][1].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} else if (x >= getWidth()*8/10 && y >= getHeight()*2/3 && x <= getWidth()*9/10 && y <= getHeight()) {
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[10] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[2][2].getValue();
        			totalScoreP2 -= downCardsP2[2][2].getValue();
        			if(downCardsP2[2][2].getFace() == cb)
        			{
        				discard = p2[2][2];
        				discardPile.add(p2[2][2]);
        			}
        			else
        			{
        				discard = downCardsP2[2][2];
        				discardPile.add(p2[2][2]);
        			}
        			downCardsP2[2][2] = temp;
        			scoreP2 += downCardsP2[2][2].getValue();
        			totalScoreP2 += downCardsP2[2][2].getValue();
	        		selectCard2 = false;
	        		timeToDraw = true;
	        		pTurn = true;
	        		clickedAreasP2[10] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[10] && !goneP2[10] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[10] = true;
        			downCardsP2[2][2] = p2[2][2];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[2][2].getValue();
	            	totalScoreP2 += downCardsP2[2][2].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        			
        		}
        		if(downCardsP2[0][2].getValue() == downCardsP2[1][2].getValue() && downCardsP2[0][2].getValue() == downCardsP2[2][2].getValue() && clickedAreasP2[2] == true && clickedAreasP2[6] == true && clickedAreasP2[10] == true)
	        	{
	        		downCardsP2[0][2].setFace(empty);
	        		goneP2[2] = true;
	        		downCardsP2[1][2].setFace(empty);
	        		goneP2[6] = true;
	        		downCardsP2[2][2].setFace(empty);
	        		goneP2[10] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][2].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][2].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[10] && !goneP2[10])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[10] = true;
	        		downCardsP2[2][2] = p2[2][2];
	        		scoreP2 += downCardsP2[2][2].getValue();
	        		totalScoreP2 += downCardsP2[2][2].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} else if (x >= getWidth()*9/10 && y >= getHeight()*2/3 && x <= getWidth() && y <= getHeight()) {
        		//checkTurns();
        		if(selectCard2 == true && !goneP2[11] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			scoreP2 -= downCardsP2[2][3].getValue();
        			totalScoreP2 -= downCardsP2[2][3].getValue();
        			if(downCardsP2[2][3].getFace() == cb)
        			{
        				discard = p2[2][3];
        				discardPile.add(p2[2][3]);
        			}
        			else
        			{
        				discard = downCardsP2[2][3];
        				discardPile.add(p2[2][3]);
        			}
        			downCardsP2[2][3] = temp;
        			scoreP2 += downCardsP2[2][3].getValue();
        			totalScoreP2 += downCardsP2[2][3].getValue();
	        		selectCard2 = false;
	        		timeToDraw = true;
	        		pTurn = true;
	        		clickedAreasP2[11] = true;
	        		cnt--;
        		}
        		else if(!clickedAreasP2[11] && !goneP2[11] && !pTurn && !timeToDraw && turnsP2 >= 0)
        		{
        			flip = false;
        			clickedAreasP2[11] = true;
        			downCardsP2[2][3] = p2[2][3];
        			pTurn = true;
        			timeToDraw = true;
	            	if(whoStarts2 == true)
	            	{
	            		pTurn = false;
	            		timeToDraw = false;
	            		whoStarts2 = false;
	            	}
	            	scoreP2 += downCardsP2[2][3].getValue();
	            	totalScoreP2 += downCardsP2[2][3].getValue();
	            	if(draw22 <= 1)
	            	{
	            		timeToDraw = false;
	            		draw22++;
	            		if(draw22 == 2)
	            		{
	            			if(scoreP2 > scoreP1)
	            			{
	            				timeToDraw = true;
	            				pTurn = false;
	            			}
	            			else
	            			{
	            				timeToDraw = true;
	            				pTurn = true;
	            			}
	            			intro = false;
	            		}
	            	}
        		}
        		if(downCardsP2[0][3].getValue() == downCardsP2[1][3].getValue() && downCardsP2[0][3].getValue() == downCardsP2[2][3].getValue() && clickedAreasP2[3] == true && clickedAreasP2[7] == true && clickedAreasP2[11] == true)
	        	{
	        		downCardsP2[0][3].setFace(empty);
	        		goneP2[3] = true;
	        		downCardsP2[1][3].setFace(empty);
	        		goneP2[7] = true;
	        		downCardsP2[2][3].setFace(empty);
	        		goneP2[11] = true;
	        		scoreP2 = scoreP2 - (3 * downCardsP2[0][3].getValue());
	        		totalScoreP2 = totalScoreP2 - (3 * downCardsP2[0][3].getValue());
	        	}
        		checkTurns();
        		if(turnsP2 <= -1 && !clickedAreasP2[11] && !goneP2[11])
	        	{
	        		timeToDraw = false;
	        		clickedAreasP2[11] = true;
	        		downCardsP2[2][3] = p2[2][3];
	        		scoreP2 += downCardsP2[2][3].getValue();
	        		totalScoreP2 += downCardsP2[2][3].getValue();
	        		if(!allCardsFlippedP2())
	        			pTurn = false;
	        		if(allCardsFlippedP2())
	        			pTurn = true;
	        		doesRoundEnd();
	        	}
        	} 
	        
	        //draw
        	else if (x >= getWidth()*9/20 && y >= getHeight()*4/25 && x <= getWidth()*11/20 && y <= getHeight()*12/25 && timeToDraw && (turnsP1 >= 0 || turnsP2 >= 0)) {
        		cnt++;
        		int rand = (int)(Math.random()*deck2.size());
        		draw = deck2.remove(rand);
        		temp = draw;
        		if(pTurn == true)
        			selectCard1 = true;
        		else if(pTurn == false)
        			selectCard2 = true;
        		timeToDraw = false;
        	} 
	        
	        //discard
        	else if (x >= getWidth()*9/20 && y >= getHeight()*191/400 && x <= getWidth()*11/20 && y <= getHeight()*159/200 && (turnsP1 >= 0 || turnsP2 >= 0)) {
        		if(selectCard1 == true)
        		{
        			discard = temp;
        			discardPile.add(temp);
        			pTurn = true;
        			timeToDraw = false;
        			selectCard1 = false;
        			cnt--;
        			flip = true;
        		}
        		else if(selectCard2 == true)
        		{
        			discard = temp;
        			discardPile.add(temp);
        			pTurn = false;
        			timeToDraw = false;
        			selectCard2 = false;
        			cnt--;
        			flip = true;
        		}
        		else if(timeToDraw && discard.getFace() != cb)
        		{
        		cnt++;
        		temp = discard;
        		discardPile.remove(discardPile.size()-1);
        		discard = discardPile.get(discardPile.size()-1);
        		if(pTurn == true)
        			selectCard1 = true;
        		else if(pTurn == false)
        			selectCard2 = true;
        		timeToDraw = !timeToDraw;
        		}
        	}
	        
	        //new round
        	else if(x >= 731 && y >= 500 && x <= 1188 && y <= 679 && roundEnd == true)
        	{
        		newRound();
        	}
	        

	    }
	    repaint();
	}
}
